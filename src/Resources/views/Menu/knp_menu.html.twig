{% extends "knp_menu.html.twig" %}

{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not same as(false) -%}
            {{- ' %s="%s"'|format(name, value is same as(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

{% block list %}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {% import _self as knp_menu %}
        {% if item.name != 'root' %}
            {% set listAttributes = listAttributes|merge({'class':'sub-menu'}) %}
            <ul{{ knp_menu.attributes(listAttributes) }}>
        {% endif %}
        {{ block('children') }}
        {% if item.name != 'root' %}
            </ul>
        {% endif %}
    {% endif %}
{% endblock %}

{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge(['active']) %}
        {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
            {%- set classes = classes|merge(['active']) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {%- set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {%- set classes = classes|merge([options.leaf_class]) %}
        {%- endif %}

        {% if item.hasChildren %}
            {%- set classes = classes|merge(['has-sub']) %}
        {% endif %}

        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {# displaying the item #}
        {% import _self as knp_menu %}
        <li {% if attributes is not empty and attributes.class is defined %}class="{{ attributes.class }}"{% endif %}>
            {% if item.attribute('divider') %}
                <hr />
            {% else %}
                {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
                    {{ block('linkElement') }}
                {%- else %}
                    {{ block('spanElement') }}
                {%- endif %}
                {# render the list of children#}
                {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
                {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
                {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
                {{ block('list') }}
            {% endif %}
        </li>
    {% endif %}
{% endblock %}

{% block linkIcons %}
    {% if item.hasChildren %}
        <b class="caret pull-right"></b>
    {% endif %}
    {% if item.attribute('badge') is not empty %}
        <span class="badge {{ item.attribute('badge-style') is not empty ? 'badge-'~item.attribute('badge-style') : '' }} pull-right">{{ item.attribute('badge') }}</span>
    {% endif %}
    {% if item.attribute('icon') is not empty %}
        <i class="fa fa-{{ item.attribute('icon') }} {{ item.attribute('icon-style') is not empty ? 'text-'~item.attribute('icon-style') : '' }}"></i>
    {% endif %}
{% endblock %}

{% block linkElement %}
    {% import _self as knp_menu %}
    <a href="{{ item.uri }}"{{ knp_menu.attributes(item.linkAttributes) }}>
        {{ block('linkIcons') }}
        {{ block('label') }}
    </a>
{% endblock %}

{% block spanElement %}
    {% import _self as knp_menu %}
    <a href="javascript:;"{{ knp_menu.attributes(item.linkAttributes) }}>
        {{ block('linkIcons') }}
        {{ block('label') }}
    </a>
{% endblock %}

{% block label %}
    <span>
    {% if options.allow_safe_labels and item.getExtra('safe_label', false) %}
        {{ item.label|trans|raw }}
    {% else %}
        {{ item.label|trans }}
    {% endif %}
    {% if item.attribute('label') is not empty %}
        <span class="label {{ item.attribute('label-style') is not empty ? 'label-'~item.attribute('label-style') : '' }} m-l-5">{{ item.attribute('label')|trans }}</span>
    {% endif %}
    </span>
{% endblock %}
